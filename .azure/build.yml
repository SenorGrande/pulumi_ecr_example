# Trigger on any push to main
trigger:
  - main

pr: none

pool:
  vmImage: ubuntu-20.04

variables:
- group: "Build"

stages:
  - stage: Build
    displayName: Build and push ECR image
    jobs:
      - job: Pulumi
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: 14.17.0
          displayName: 'Install Node.js version 14.17.0'

        - task: Bash@3
          name: npmInstall
          displayName: NPM Install
          inputs:
              targetType: 'inline'
              script: npm i

        - task: Bash@3
          name: npmInstallApp
          displayName: NPM Install App Dependencies
          inputs:
              workingDirectory: $(Build.SourcesDirectory)/app
              targetType: 'inline'
              script: npm i

        - task: Bash@3
          name: npmBuild
          displayName: NPM Build
          inputs:
              workingDirectory: $(Build.SourcesDirectory)/app
              targetType: 'inline'
              script: npm run build

        - task: Bash@3
          name: pulumiLogin
          displayName: Pulumi Login
          inputs:
              targetType: 'inline'
              script: pulumi login
          env:
            PULUMI_ACCESS_TOKEN: $(PULUMI_ACCESS_TOKEN)

        - task: Bash@3
          name: pulumiStackSelect
          displayName: Pulumi Stack Select
          inputs:
              targetType: 'inline'
              script: pulumi stack select dev -c --non-interactive

        - task: Bash@3
          name: dockerLogin
          displayName: 'Login to AWS'
          inputs: 
            targetType: 'inline'
            script: aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com
          env:
            AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

        - task: Bash@3
          name: prerelease
          displayName: Semantic Pre-Release
          inputs:
            targetType: 'inline'
            script: |
              npm run release:determine-new-version

        - task: Bash@3
          name: release
          displayName: Semantic Release
          inputs:
            failOnStderr: true
            targetType: 'inline'
            script: |
              npm run release:create
              new_version="$(cat nextRelease)"
              echo "##vso[task.setvariable variable=VERSION]$new_version"
          env:
            GH_TOKEN: $(GH_TOKEN)

        # publish nextRelease file containing new version number as artifact for deploy pipeline to use
        - publish: nextRelease
          artifact: VERSION

        - task: Bash@3
          name: pulumiUp
          displayName: Pulumi Up
          inputs:
              targetType: 'inline'
              script: pulumi up -y
          env:
            AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
